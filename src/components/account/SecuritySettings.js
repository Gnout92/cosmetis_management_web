import { useState, useEffect } from 'react';
import styles from '../../styles/login.module.css';

const SecuritySettings = ({ user, showNotification }) => {
  const [activeDevices, setActiveDevices] = useState([]);
  const [loginHistory, setLoginHistory] = useState([]);
  const [securitySettings, setSecuritySettings] = useState({
    twoFactorEnabled: false,
    loginAlerts: true,
    deviceRemember: true,
    passwordExpiry: 90
  });
  const [isLoading, setIsLoading] = useState(true);
  const [showChangePassword, setShowChangePassword] = useState(false);
  const [passwordForm, setPasswordForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });

  useEffect(() => {
    // Gi·∫£ l·∫≠p t·∫£i d·ªØ li·ªáu b·∫£o m·∫≠t
    const loadSecurityData = async () => {
      setIsLoading(true);
      try {
        // Gi·∫£ l·∫≠p API call
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // D·ªØ li·ªáu gi·∫£ l·∫≠p - thi·∫øt b·ªã ƒëƒÉng nh·∫≠p
        const mockDevices = [
          {
            id: 'device_1',
            deviceName: 'Chrome on Windows',
            deviceType: 'desktop',
            location: 'Ho Chi Minh City, Vietnam',
            ipAddress: '192.168.1.100',
            lastActive: '2024-01-25T14:30:00Z',
            isCurrent: true
          },
          {
            id: 'device_2',
            deviceName: 'Safari on iPhone',
            deviceType: 'mobile',
            location: 'Ho Chi Minh City, Vietnam',
            ipAddress: '192.168.1.101',
            lastActive: '2024-01-24T09:15:00Z',
            isCurrent: false
          },
          {
            id: 'device_3',
            deviceName: 'Chrome on Android',
            deviceType: 'mobile',
            location: 'Hanoi, Vietnam',
            ipAddress: '10.0.0.50',
            lastActive: '2024-01-20T18:20:00Z',
            isCurrent: false
          }
        ];

        // D·ªØ li·ªáu gi·∫£ l·∫≠p - l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p
        const mockLoginHistory = [
          {
            id: 'login_1',
            timestamp: '2024-01-25T14:30:00Z',
            device: 'Chrome on Windows',
            location: 'Ho Chi Minh City, Vietnam',
            ipAddress: '192.168.1.100',
            status: 'success',
            method: 'google'
          },
          {
            id: 'login_2',
            timestamp: '2024-01-24T09:15:00Z',
            device: 'Safari on iPhone',
            location: 'Ho Chi Minh City, Vietnam',
            ipAddress: '192.168.1.101',
            status: 'success',
            method: 'google'
          },
          {
            id: 'login_3',
            timestamp: '2024-01-20T18:20:00Z',
            device: 'Chrome on Android',
            location: 'Hanoi, Vietnam',
            ipAddress: '10.0.0.50',
            status: 'success',
            method: 'google'
          },
          {
            id: 'login_4',
            timestamp: '2024-01-18T22:45:00Z',
            device: 'Unknown Device',
            location: 'Unknown Location',
            ipAddress: '203.162.4.100',
            status: 'failed',
            method: 'google'
          }
        ];

        setActiveDevices(mockDevices);
        setLoginHistory(mockLoginHistory);
      } catch (error) {
        showNotification('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin b·∫£o m·∫≠t', 'error');
      } finally {
        setIsLoading(false);
      }
    };

    loadSecurityData();
  }, []);

  const getDeviceIcon = (deviceType) => {
    switch (deviceType) {
      case 'desktop': return 'üíª';
      case 'mobile': return 'üì±';
      case 'tablet': return 'üì±';
      default: return 'üíª';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'success': return '‚úÖ';
      case 'failed': return '‚ùå';
      default: return '‚ùì';
    }
  };

  const handleLogoutDevice = async (deviceId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t thi·∫øt b·ªã n√†y?')) {
      try {
        // Gi·∫£ l·∫≠p API call
        await new Promise(resolve => setTimeout(resolve, 500));
        
        setActiveDevices(activeDevices.filter(device => device.id !== deviceId));
        showNotification('ƒê√£ ƒëƒÉng xu·∫•t thi·∫øt b·ªã th√†nh c√¥ng', 'success');
      } catch (error) {
        showNotification('C√≥ l·ªói x·∫£y ra', 'error');
      }
    }
  };

  const handleLogoutAllDevices = async () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t t·∫•t c·∫£ thi·∫øt b·ªã kh√°c (tr·ª´ thi·∫øt b·ªã hi·ªán t·∫°i)?')) {
      try {
        // Gi·∫£ l·∫≠p API call
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        setActiveDevices(activeDevices.filter(device => device.isCurrent));
        showNotification('ƒê√£ ƒëƒÉng xu·∫•t t·∫•t c·∫£ thi·∫øt b·ªã kh√°c', 'success');
      } catch (error) {
        showNotification('C√≥ l·ªói x·∫£y ra', 'error');
      }
    }
  };

  const handleSecuritySettingChange = async (setting, value) => {
    try {
      setSecuritySettings(prev => ({ ...prev, [setting]: value }));
      showNotification('C·∫≠p nh·∫≠t c√†i ƒë·∫∑t b·∫£o m·∫≠t th√†nh c√¥ng', 'success');
    } catch (error) {
      showNotification('C√≥ l·ªói x·∫£y ra', 'error');
    }
  };

  const handlePasswordChange = async (e) => {
    e.preventDefault();
    
    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      showNotification('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp', 'error');
      return;
    }

    if (passwordForm.newPassword.length < 8) {
      showNotification('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±', 'error');
      return;
    }

    try {
      // Gi·∫£ l·∫≠p API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      setPasswordForm({ currentPassword: '', newPassword: '', confirmPassword: '' });
      setShowChangePassword(false);
      showNotification('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng', 'success');
    } catch (error) {
      showNotification('C√≥ l·ªói x·∫£y ra khi ƒë·ªïi m·∫≠t kh·∫©u', 'error');
    }
  };

  if (isLoading) {
    return (
      <div>
        <div className={styles.contentHeader}>
          <h1 className={styles.contentTitle}>B·∫£o m·∫≠t</h1>
          <p className={styles.contentSubtitle}>ƒêang t·∫£i...</p>
        </div>
        <div className={styles.contentSection} style={{ textAlign: 'center', padding: '3rem' }}>
          <div className={styles.loadingSpinner} style={{ margin: '0 auto', width: '40px', height: '40px' }}></div>
        </div>
      </div>
    );
  }

  return (
    <div>
      <div className={styles.contentHeader}>
        <h1 className={styles.contentTitle}>B·∫£o m·∫≠t t√†i kho·∫£n</h1>
        <p className={styles.contentSubtitle}>Qu·∫£n l√Ω b·∫£o m·∫≠t v√† quy·ªÅn truy c·∫≠p t√†i kho·∫£n c·ªßa b·∫°n</p>
      </div>

      {/* Th√¥ng tin t√†i kho·∫£n */}
      <div className={styles.contentSection}>
        <div className={styles.sectionHeader}>
          <h2 className={styles.sectionTitle}>üîí Th√¥ng tin ƒëƒÉng nh·∫≠p</h2>
          <p className={styles.sectionDescription}>Qu·∫£n l√Ω th√¥ng tin ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u</p>
        </div>

        <div className={styles.formGrid}>
          <div className={styles.formGroup}>
            <label className={styles.formLabel}>Email ƒëƒÉng nh·∫≠p</label>
            <input
              type="email"
              value={user?.email || ''}
              className={styles.formInput}
              disabled
              style={{ background: '#f5f5f5' }}
            />
            <small style={{ color: '#999', fontSize: '0.8rem', marginTop: '0.25rem', display: 'block' }}>
              ƒêƒÉng nh·∫≠p b·∫±ng Google OAuth - kh√¥ng th·ªÉ thay ƒë·ªïi
            </small>
          </div>

          <div className={styles.formGroup}>
            <label className={styles.formLabel}>Ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p</label>
            <input
              type="text"
              value="Google OAuth 2.0"
              className={styles.formInput}
              disabled
              style={{ background: '#f5f5f5' }}
            />
            <small style={{ color: '#4caf50', fontSize: '0.8rem', marginTop: '0.25rem', display: 'block' }}>
              ‚úì B·∫£o m·∫≠t cao v·ªõi chu·∫©n OAuth 2.0
            </small>
          </div>
        </div>

        {!showChangePassword ? (
          <div style={{ marginTop: '1.5rem' }}>
            <button
              onClick={() => setShowChangePassword(true)}
              className={`${styles.btn} ${styles['btn-primary']}`}
            >
              üîë ƒê·ªïi m·∫≠t kh·∫©u
            </button>
            <p style={{ color: '#999', fontSize: '0.85rem', marginTop: '0.5rem' }}>
              L·ªùi khuy√™n: B·∫±ng vi·ªác s·ª≠ d·ª•ng Google OAuth, m·∫≠t kh·∫©u c·ªßa b·∫°n ƒë∆∞·ª£c Google qu·∫£n l√Ω an to√†n
            </p>
          </div>
        ) : (
          <form onSubmit={handlePasswordChange} style={{ marginTop: '1.5rem' }}>
            <div className={styles.formGrid}>
              <div className={styles.formGroup}>
                <label className={styles.formLabel}>M·∫≠t kh·∫©u hi·ªán t·∫°i</label>
                <input
                  type="password"
                  value={passwordForm.currentPassword}
                  onChange={(e) => setPasswordForm(prev => ({ ...prev, currentPassword: e.target.value }))}
                  className={styles.formInput}
                  required
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
                />
              </div>

              <div className={styles.formGroup}>
                <label className={styles.formLabel}>M·∫≠t kh·∫©u m·ªõi</label>
                <input
                  type="password"
                  value={passwordForm.newPassword}
                  onChange={(e) => setPasswordForm(prev => ({ ...prev, newPassword: e.target.value }))}
                  className={styles.formInput}
                  required
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                  minLength="8"
                />
              </div>

              <div className={styles.formGroup}>
                <label className={styles.formLabel}>X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi</label>
                <input
                  type="password"
                  value={passwordForm.confirmPassword}
                  onChange={(e) => setPasswordForm(prev => ({ ...prev, confirmPassword: e.target.value }))}
                  className={styles.formInput}
                  required
                  placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
                  minLength="8"
                />
              </div>
            </div>

            <div style={{ display: 'flex', gap: '1rem', marginTop: '1rem' }}>
              <button
                type="button"
                onClick={() => {
                  setShowChangePassword(false);
                  setPasswordForm({ currentPassword: '', newPassword: '', confirmPassword: '' });
                }}
                className={`${styles.btn} ${styles['btn-secondary']}`}
              >
                H·ªßy
              </button>
              <button
                type="submit"
                className={`${styles.btn} ${styles['btn-success']}`}
              >
                üíæ ƒê·ªïi m·∫≠t kh·∫©u
              </button>
            </div>
          </form>
        )}
      </div>

      {/* C√†i ƒë·∫∑t b·∫£o m·∫≠t */}
      <div className={styles.contentSection}>
        <div className={styles.sectionHeader}>
          <h2 className={styles.sectionTitle}>‚öôÔ∏è C√†i ƒë·∫∑t b·∫£o m·∫≠t</h2>
          <p className={styles.sectionDescription}>T√πy ch·ªânh c√°c c√†i ƒë·∫∑t b·∫£o m·∫≠t cho t√†i kho·∫£n</p>
        </div>

        <div className={styles.formGrid}>
          <div className={styles.formGroup}>
            <label style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', cursor: 'pointer' }}>
              <input
                type="checkbox"
                checked={securitySettings.twoFactorEnabled}
                onChange={(e) => handleSecuritySettingChange('twoFactorEnabled', e.target.checked)}
              />
              üîí X√°c th·ª±c hai y·∫øu t·ªë (2FA)
            </label>
            <small style={{ color: '#666', fontSize: '0.8rem', marginTop: '0.25rem', display: 'block' }}>
              Th√™m l·ªõp b·∫£o v·ªá b·∫±ng m√£ x√°c th·ª±c SMS ho·∫∑c app
            </small>
          </div>

          <div className={styles.formGroup}>
            <label style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', cursor: 'pointer' }}>
              <input
                type="checkbox"
                checked={securitySettings.loginAlerts}
                onChange={(e) => handleSecuritySettingChange('loginAlerts', e.target.checked)}
              />
              üìß C·∫£nh b√°o ƒëƒÉng nh·∫≠p
            </label>
            <small style={{ color: '#666', fontSize: '0.8rem', marginTop: '0.25rem', display: 'block' }}>
              Nh·∫≠n email khi c√≥ ƒëƒÉng nh·∫≠p t·ª´ thi·∫øt b·ªã m·ªõi
            </small>
          </div>

          <div className={styles.formGroup}>
            <label style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', cursor: 'pointer' }}>
              <input
                type="checkbox"
                checked={securitySettings.deviceRemember}
                onChange={(e) => handleSecuritySettingChange('deviceRemember', e.target.checked)}
              />
              üì± Ghi nh·ªõ thi·∫øt b·ªã
            </label>
            <small style={{ color: '#666', fontSize: '0.8rem', marginTop: '0.25rem', display: 'block' }}>
              Gi·ªØ ƒëƒÉng nh·∫≠p tr√™n c√°c thi·∫øt b·ªã ƒë√°ng tin c·∫≠y
            </small>
          </div>

          <div className={styles.formGroup}>
            <label className={styles.formLabel}>T·ª± ƒë·ªông ƒëƒÉng xu·∫•t sau (ng√†y)</label>
            <select
              value={securitySettings.passwordExpiry}
              onChange={(e) => handleSecuritySettingChange('passwordExpiry', parseInt(e.target.value))}
              className={styles.formInput}
            >
              <option value={30}>30 ng√†y</option>
              <option value={60}>60 ng√†y</option>
              <option value={90}>90 ng√†y</option>
              <option value={180}>180 ng√†y</option>
              <option value={-1}>Kh√¥ng bao gi·ªù</option>
            </select>
          </div>
        </div>
      </div>

      {/* Thi·∫øt b·ªã ƒëƒÉng nh·∫≠p */}
      <div className={styles.contentSection}>
        <div className={styles.sectionHeader}>
          <h2 className={styles.sectionTitle}>üì± Thi·∫øt b·ªã ƒëƒÉng nh·∫≠p ({activeDevices.length})</h2>
          <p className={styles.sectionDescription}>C√°c thi·∫øt b·ªã ƒëang ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n</p>
        </div>

        {activeDevices.length > 1 && (
          <div style={{ marginBottom: '1.5rem' }}>
            <button
              onClick={handleLogoutAllDevices}
              className={`${styles.btn} ${styles['btn-danger']}`}
              style={{ fontSize: '0.9rem' }}
            >
              üö™ ƒêƒÉng xu·∫•t t·∫•t c·∫£ thi·∫øt b·ªã kh√°c
            </button>
          </div>
        )}

        <div style={{ display: 'grid', gap: '1rem' }}>
          {activeDevices.map((device) => (
            <div key={device.id} style={{
              border: '1px solid #e0e0e0',
              borderRadius: '12px',
              padding: '1.5rem',
              background: device.isCurrent ? 'linear-gradient(135deg, rgba(76, 175, 80, 0.05) 0%, rgba(129, 199, 132, 0.05) 100%)' : 'white',
              position: 'relative'
            }}>
              {device.isCurrent && (
                <div style={{
                  position: 'absolute',
                  top: '1rem',
                  right: '1rem',
                  background: '#4caf50',
                  color: 'white',
                  padding: '0.25rem 0.75rem',
                  borderRadius: '25px',
                  fontSize: '0.8rem',
                  fontWeight: '600'
                }}>
                  ‚Ä¢ Hi·ªán t·∫°i
                </div>
              )}

              <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>
                <div style={{ fontSize: '2rem' }}>
                  {getDeviceIcon(device.deviceType)}
                </div>
                <div style={{ flex: 1 }}>
                  <h3 style={{ margin: '0 0 0.5rem 0', fontSize: '1.1rem', fontWeight: '600' }}>
                    {device.deviceName}
                  </h3>
                  <p style={{ margin: '0 0 0.25rem 0', color: '#666', fontSize: '0.9rem' }}>
                    üìç {device.location}
                  </p>
                  <p style={{ margin: '0 0 0.25rem 0', color: '#666', fontSize: '0.9rem' }}>
                    üåê IP: {device.ipAddress}
                  </p>
                  <p style={{ margin: '0', color: '#999', fontSize: '0.85rem' }}>
                    Ho·∫°t ƒë·ªông cu·ªëi: {new Date(device.lastActive).toLocaleString('vi-VN')}
                  </p>
                </div>
                {!device.isCurrent && (
                  <button
                    onClick={() => handleLogoutDevice(device.id)}
                    className={`${styles.btn} ${styles['btn-danger']}`}
                    style={{ fontSize: '0.85rem', padding: '0.5rem 1rem' }}
                  >
                    üö™ ƒêƒÉng xu·∫•t
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* L·ªãch s·ª≠ ƒëƒÉng nh·∫≠p */}
      <div className={styles.contentSection}>
        <div className={styles.sectionHeader}>
          <h2 className={styles.sectionTitle}>üìÖ L·ªãch s·ª≠ ƒëƒÉng nh·∫≠p</h2>
          <p className={styles.sectionDescription}>C√°c l·∫ßn ƒëƒÉng nh·∫≠p g·∫ßn ƒë√¢y (10 l·∫ßn cu·ªëi)</p>
        </div>

        <div style={{ overflowX: 'auto' }}>
          <table style={{ width: '100%', borderCollapse: 'collapse' }}>
            <thead>
              <tr style={{ background: '#f5f5f5' }}>
                <th style={{ padding: '1rem', textAlign: 'left', borderBottom: '1px solid #e0e0e0' }}>Tr·∫°ng th√°i</th>
                <th style={{ padding: '1rem', textAlign: 'left', borderBottom: '1px solid #e0e0e0' }}>Th·ªùi gian</th>
                <th style={{ padding: '1rem', textAlign: 'left', borderBottom: '1px solid #e0e0e0' }}>Thi·∫øt b·ªã</th>
                <th style={{ padding: '1rem', textAlign: 'left', borderBottom: '1px solid #e0e0e0' }}>V·ªã tr√≠</th>
                <th style={{ padding: '1rem', textAlign: 'left', borderBottom: '1px solid #e0e0e0' }}>IP</th>
              </tr>
            </thead>
            <tbody>
              {loginHistory.map((login) => (
                <tr key={login.id}>
                  <td style={{ padding: '1rem', borderBottom: '1px solid #f0f0f0' }}>
                    <span style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                      {getStatusIcon(login.status)}
                      <span style={{ color: login.status === 'success' ? '#4caf50' : '#f44336' }}>
                        {login.status === 'success' ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}
                      </span>
                    </span>
                  </td>
                  <td style={{ padding: '1rem', borderBottom: '1px solid #f0f0f0', fontSize: '0.9rem' }}>
                    {new Date(login.timestamp).toLocaleString('vi-VN')}
                  </td>
                  <td style={{ padding: '1rem', borderBottom: '1px solid #f0f0f0', fontSize: '0.9rem' }}>
                    {login.device}
                  </td>
                  <td style={{ padding: '1rem', borderBottom: '1px solid #f0f0f0', fontSize: '0.9rem' }}>
                    {login.location}
                  </td>
                  <td style={{ padding: '1rem', borderBottom: '1px solid #f0f0f0', fontSize: '0.9rem', fontFamily: 'monospace' }}>
                    {login.ipAddress}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* L·ªùi khuy√™n b·∫£o m·∫≠t */}
      <div className={styles.contentSection}>
        <div className={styles.sectionHeader}>
          <h2 className={styles.sectionTitle}>üõÅ L·ªùi khuy√™n b·∫£o m·∫≠t</h2>
        </div>
        <div style={{ background: '#f9f9f9', padding: '1.5rem', borderRadius: '8px' }}>
          <ul style={{ margin: '0', paddingLeft: '1.5rem', color: '#666' }}>
            <li style={{ marginBottom: '0.5rem' }}>S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh v√† duy nh·∫•t cho m·ªói t√†i kho·∫£n</li>
            <li style={{ marginBottom: '0.5rem' }}>B·∫≠t th√¥ng b√°o ƒëƒÉng nh·∫≠p ƒë·ªÉ ph√°t hi·ªán truy c·∫≠p b·∫•t th∆∞·ªùng</li>
            <li style={{ marginBottom: '0.5rem' }}>Th∆∞·ªùng xuy√™n ki·ªÉm tra danh s√°ch thi·∫øt b·ªã ƒëƒÉng nh·∫≠p</li>
            <li style={{ marginBottom: '0.5rem' }}>ƒêƒÉng xu·∫•t kh·ªèi c√°c thi·∫øt b·ªã c√¥ng c·ªông sau khi s·ª≠ d·ª•ng</li>
            <li>Kh√¥ng chia s·∫ª th√¥ng tin ƒëƒÉng nh·∫≠p v·ªõi b·∫•t k·ª≥ ai</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default SecuritySettings;